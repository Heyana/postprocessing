"use strict";
(() => {
  // src/textures/RawImageData.js
  function createCanvas(width, height, data) {
    const canvas = document.createElement("canvas");
    const context = canvas.getContext("2d");
    canvas.width = width;
    canvas.height = height;
    if (data instanceof Image) {
      context.drawImage(data, 0, 0);
    } else {
      const imageData = context.createImageData(width, height);
      imageData.data.set(data);
      context.putImageData(imageData, 0, 0);
    }
    return canvas;
  }
  var RawImageData = class _RawImageData {
    /**
     * Constructs a new image data container.
     *
     * @param {Number} [width=0] - The width of the image.
     * @param {Number} [height=0] - The height of the image.
     * @param {Uint8ClampedArray} [data=null] - The image data.
     */
    constructor(width = 0, height = 0, data = null) {
      this.width = width;
      this.height = height;
      this.data = data;
    }
    /**
     * Creates a canvas from this image data.
     *
     * @return {Canvas} The canvas, or null if it couldn't be created.
     */
    toCanvas() {
      return typeof document === "undefined" ? null : createCanvas(this.width, this.height, this.data);
    }
    /**
     * Creates a new image data container.
     *
     * @param {ImageData|Image} image - An image or plain image data.
     * @return {RawImageData} The image data.
     */
    static from(image) {
      const { width, height } = image;
      let data;
      if (image instanceof Image) {
        const canvas = createCanvas(width, height, image);
        if (canvas !== null) {
          const context = canvas.getContext("2d");
          data = context.getImageData(0, 0, width, height).data;
        }
      } else {
        data = image.data;
      }
      return new _RawImageData(width, height, data);
    }
  };

  // src/textures/smaa/SMAAAreaImageData.js
  var area = [
    new Float32Array(2),
    new Float32Array(2)
  ];
  var ORTHOGONAL_SIZE = 16;
  var DIAGONAL_SIZE = 20;
  var DIAGONAL_SAMPLES = 30;
  var SMOOTH_MAX_DISTANCE = 32;
  var orthogonalSubsamplingOffsets = new Float32Array([
    0,
    -0.25,
    0.25,
    -0.125,
    0.125,
    -0.375,
    0.375
  ]);
  var diagonalSubsamplingOffsets = [
    new Float32Array([0, 0]),
    new Float32Array([0.25, -0.25]),
    new Float32Array([-0.25, 0.25]),
    new Float32Array([0.125, -0.125]),
    new Float32Array([-0.125, 0.125])
  ];
  var orthogonalEdges = [
    new Uint8Array([0, 0]),
    new Uint8Array([3, 0]),
    new Uint8Array([0, 3]),
    new Uint8Array([3, 3]),
    new Uint8Array([1, 0]),
    new Uint8Array([4, 0]),
    new Uint8Array([1, 3]),
    new Uint8Array([4, 3]),
    new Uint8Array([0, 1]),
    new Uint8Array([3, 1]),
    new Uint8Array([0, 4]),
    new Uint8Array([3, 4]),
    new Uint8Array([1, 1]),
    new Uint8Array([4, 1]),
    new Uint8Array([1, 4]),
    new Uint8Array([4, 4])
  ];
  var diagonalEdges = [
    new Uint8Array([0, 0]),
    new Uint8Array([1, 0]),
    new Uint8Array([0, 2]),
    new Uint8Array([1, 2]),
    new Uint8Array([2, 0]),
    new Uint8Array([3, 0]),
    new Uint8Array([2, 2]),
    new Uint8Array([3, 2]),
    new Uint8Array([0, 1]),
    new Uint8Array([1, 1]),
    new Uint8Array([0, 3]),
    new Uint8Array([1, 3]),
    new Uint8Array([2, 1]),
    new Uint8Array([3, 1]),
    new Uint8Array([2, 3]),
    new Uint8Array([3, 3])
  ];
  function lerp(a, b, p) {
    return a + (b - a) * p;
  }
  function saturate(a) {
    return Math.min(Math.max(a, 0), 1);
  }
  function smoothArea(d) {
    const a1 = area[0];
    const a2 = area[1];
    const b1X = Math.sqrt(a1[0] * 2) * 0.5;
    const b1Y = Math.sqrt(a1[1] * 2) * 0.5;
    const b2X = Math.sqrt(a2[0] * 2) * 0.5;
    const b2Y = Math.sqrt(a2[1] * 2) * 0.5;
    const p = saturate(d / SMOOTH_MAX_DISTANCE);
    a1[0] = lerp(b1X, a1[0], p);
    a1[1] = lerp(b1Y, a1[1], p);
    a2[0] = lerp(b2X, a2[0], p);
    a2[1] = lerp(b2Y, a2[1], p);
  }
  function getOrthArea(p1X, p1Y, p2X, p2Y, x, result) {
    const dX = p2X - p1X;
    const dY = p2Y - p1Y;
    const x1 = x;
    const x2 = x + 1;
    const y1 = p1Y + dY * (x1 - p1X) / dX;
    const y2 = p1Y + dY * (x2 - p1X) / dX;
    if (x1 >= p1X && x1 < p2X || x2 > p1X && x2 <= p2X) {
      if (Math.sign(y1) === Math.sign(y2) || Math.abs(y1) < 1e-4 || Math.abs(y2) < 1e-4) {
        const a = (y1 + y2) / 2;
        if (a < 0) {
          result[0] = Math.abs(a);
          result[1] = 0;
        } else {
          result[0] = 0;
          result[1] = Math.abs(a);
        }
      } else {
        const t = -p1Y * dX / dY + p1X;
        const tInt = Math.trunc(t);
        const a1 = t > p1X ? y1 * (t - tInt) / 2 : 0;
        const a2 = t < p2X ? y2 * (1 - (t - tInt)) / 2 : 0;
        const a = Math.abs(a1) > Math.abs(a2) ? a1 : -a2;
        if (a < 0) {
          result[0] = Math.abs(a1);
          result[1] = Math.abs(a2);
        } else {
          result[0] = Math.abs(a2);
          result[1] = Math.abs(a1);
        }
      }
    } else {
      result[0] = 0;
      result[1] = 0;
    }
    return result;
  }
  function getOrthAreaForPattern(pattern, left, right, offset, result) {
    const a1 = area[0];
    const a2 = area[1];
    const o1 = 0.5 + offset;
    const o2 = 0.5 + offset - 1;
    const d = left + right + 1;
    switch (pattern) {
      case 0: {
        result[0] = 0;
        result[1] = 0;
        break;
      }
      case 1: {
        if (left <= right) {
          getOrthArea(0, o2, d / 2, 0, left, result);
        } else {
          result[0] = 0;
          result[1] = 0;
        }
        break;
      }
      case 2: {
        if (left >= right) {
          getOrthArea(d / 2, 0, d, o2, left, result);
        } else {
          result[0] = 0;
          result[1] = 0;
        }
        break;
      }
      case 3: {
        getOrthArea(0, o2, d / 2, 0, left, a1);
        getOrthArea(d / 2, 0, d, o2, left, a2);
        smoothArea(d, area);
        result[0] = a1[0] + a2[0];
        result[1] = a1[1] + a2[1];
        break;
      }
      case 4: {
        if (left <= right) {
          getOrthArea(0, o1, d / 2, 0, left, result);
        } else {
          result[0] = 0;
          result[1] = 0;
        }
        break;
      }
      case 5: {
        result[0] = 0;
        result[1] = 0;
        break;
      }
      case 6: {
        if (Math.abs(offset) > 0) {
          getOrthArea(0, o1, d, o2, left, a1);
          getOrthArea(0, o1, d / 2, 0, left, a2);
          getOrthArea(d / 2, 0, d, o2, left, result);
          a2[0] = a2[0] + result[0];
          a2[1] = a2[1] + result[1];
          result[0] = (a1[0] + a2[0]) / 2;
          result[1] = (a1[1] + a2[1]) / 2;
        } else {
          getOrthArea(0, o1, d, o2, left, result);
        }
        break;
      }
      case 7: {
        getOrthArea(0, o1, d, o2, left, result);
        break;
      }
      case 8: {
        if (left >= right) {
          getOrthArea(d / 2, 0, d, o1, left, result);
        } else {
          result[0] = 0;
          result[1] = 0;
        }
        break;
      }
      case 9: {
        if (Math.abs(offset) > 0) {
          getOrthArea(0, o2, d, o1, left, a1);
          getOrthArea(0, o2, d / 2, 0, left, a2);
          getOrthArea(d / 2, 0, d, o1, left, result);
          a2[0] = a2[0] + result[0];
          a2[1] = a2[1] + result[1];
          result[0] = (a1[0] + a2[0]) / 2;
          result[1] = (a1[1] + a2[1]) / 2;
        } else {
          getOrthArea(0, o2, d, o1, left, result);
        }
        break;
      }
      case 10: {
        result[0] = 0;
        result[1] = 0;
        break;
      }
      case 11: {
        getOrthArea(0, o2, d, o1, left, result);
        break;
      }
      case 12: {
        getOrthArea(0, o1, d / 2, 0, left, a1);
        getOrthArea(d / 2, 0, d, o1, left, a2);
        smoothArea(d, area);
        result[0] = a1[0] + a2[0];
        result[1] = a1[1] + a2[1];
        break;
      }
      case 13: {
        getOrthArea(0, o2, d, o1, left, result);
        break;
      }
      case 14: {
        getOrthArea(0, o1, d, o2, left, result);
        break;
      }
      case 15: {
        result[0] = 0;
        result[1] = 0;
        break;
      }
    }
    return result;
  }
  function isInsideArea(a1X, a1Y, a2X, a2Y, x, y) {
    let result = a1X === a2X && a1Y === a2Y;
    if (!result) {
      const xm = (a1X + a2X) / 2;
      const ym = (a1Y + a2Y) / 2;
      const a = a2Y - a1Y;
      const b = a1X - a2X;
      const c = a * (x - xm) + b * (y - ym);
      result = c > 0;
    }
    return result;
  }
  function getDiagAreaForPixel(a1X, a1Y, a2X, a2Y, pX, pY) {
    let n = 0;
    for (let y = 0; y < DIAGONAL_SAMPLES; ++y) {
      for (let x = 0; x < DIAGONAL_SAMPLES; ++x) {
        const offsetX = x / (DIAGONAL_SAMPLES - 1);
        const offsetY = y / (DIAGONAL_SAMPLES - 1);
        if (isInsideArea(a1X, a1Y, a2X, a2Y, pX + offsetX, pY + offsetY)) {
          ++n;
        }
      }
    }
    return n / (DIAGONAL_SAMPLES * DIAGONAL_SAMPLES);
  }
  function getDiagArea(pattern, a1X, a1Y, a2X, a2Y, left, offset, result) {
    const e = diagonalEdges[pattern];
    const e1 = e[0];
    const e2 = e[1];
    if (e1 > 0) {
      a1X += offset[0];
      a1Y += offset[1];
    }
    if (e2 > 0) {
      a2X += offset[0];
      a2Y += offset[1];
    }
    result[0] = 1 - getDiagAreaForPixel(a1X, a1Y, a2X, a2Y, 1 + left, 0 + left);
    result[1] = getDiagAreaForPixel(a1X, a1Y, a2X, a2Y, 1 + left, 1 + left);
    return result;
  }
  function getDiagAreaForPattern(pattern, left, right, offset, result) {
    const a1 = area[0];
    const a2 = area[1];
    const d = left + right + 1;
    switch (pattern) {
      case 0: {
        getDiagArea(pattern, 1, 1, 1 + d, 1 + d, left, offset, a1);
        getDiagArea(pattern, 1, 0, 1 + d, 0 + d, left, offset, a2);
        result[0] = (a1[0] + a2[0]) / 2;
        result[1] = (a1[1] + a2[1]) / 2;
        break;
      }
      case 1: {
        getDiagArea(pattern, 1, 0, 0 + d, 0 + d, left, offset, a1);
        getDiagArea(pattern, 1, 0, 1 + d, 0 + d, left, offset, a2);
        result[0] = (a1[0] + a2[0]) / 2;
        result[1] = (a1[1] + a2[1]) / 2;
        break;
      }
      case 2: {
        getDiagArea(pattern, 0, 0, 1 + d, 0 + d, left, offset, a1);
        getDiagArea(pattern, 1, 0, 1 + d, 0 + d, left, offset, a2);
        result[0] = (a1[0] + a2[0]) / 2;
        result[1] = (a1[1] + a2[1]) / 2;
        break;
      }
      case 3: {
        getDiagArea(pattern, 1, 0, 1 + d, 0 + d, left, offset, result);
        break;
      }
      case 4: {
        getDiagArea(pattern, 1, 1, 0 + d, 0 + d, left, offset, a1);
        getDiagArea(pattern, 1, 1, 1 + d, 0 + d, left, offset, a2);
        result[0] = (a1[0] + a2[0]) / 2;
        result[1] = (a1[1] + a2[1]) / 2;
        break;
      }
      case 5: {
        getDiagArea(pattern, 1, 1, 0 + d, 0 + d, left, offset, a1);
        getDiagArea(pattern, 1, 0, 1 + d, 0 + d, left, offset, a2);
        result[0] = (a1[0] + a2[0]) / 2;
        result[1] = (a1[1] + a2[1]) / 2;
        break;
      }
      case 6: {
        getDiagArea(pattern, 1, 1, 1 + d, 0 + d, left, offset, result);
        break;
      }
      case 7: {
        getDiagArea(pattern, 1, 1, 1 + d, 0 + d, left, offset, a1);
        getDiagArea(pattern, 1, 0, 1 + d, 0 + d, left, offset, a2);
        result[0] = (a1[0] + a2[0]) / 2;
        result[1] = (a1[1] + a2[1]) / 2;
        break;
      }
      case 8: {
        getDiagArea(pattern, 0, 0, 1 + d, 1 + d, left, offset, a1);
        getDiagArea(pattern, 1, 0, 1 + d, 1 + d, left, offset, a2);
        result[0] = (a1[0] + a2[0]) / 2;
        result[1] = (a1[1] + a2[1]) / 2;
        break;
      }
      case 9: {
        getDiagArea(pattern, 1, 0, 1 + d, 1 + d, left, offset, result);
        getDiagArea(pattern, 1, 0, 1 + d, 1 + d, left, offset, result);
        break;
      }
      case 10: {
        getDiagArea(pattern, 0, 0, 1 + d, 1 + d, left, offset, a1);
        getDiagArea(pattern, 1, 0, 1 + d, 0 + d, left, offset, a2);
        result[0] = (a1[0] + a2[0]) / 2;
        result[1] = (a1[1] + a2[1]) / 2;
        break;
      }
      case 11: {
        getDiagArea(pattern, 1, 0, 1 + d, 1 + d, left, offset, a1);
        getDiagArea(pattern, 1, 0, 1 + d, 0 + d, left, offset, a2);
        result[0] = (a1[0] + a2[0]) / 2;
        result[1] = (a1[1] + a2[1]) / 2;
        break;
      }
      case 12: {
        getDiagArea(pattern, 1, 1, 1 + d, 1 + d, left, offset, result);
        break;
      }
      case 13: {
        getDiagArea(pattern, 1, 1, 1 + d, 1 + d, left, offset, a1);
        getDiagArea(pattern, 1, 0, 1 + d, 1 + d, left, offset, a2);
        result[0] = (a1[0] + a2[0]) / 2;
        result[1] = (a1[1] + a2[1]) / 2;
        break;
      }
      case 14: {
        getDiagArea(pattern, 1, 1, 1 + d, 1 + d, left, offset, a1);
        getDiagArea(pattern, 1, 1, 1 + d, 0 + d, left, offset, a2);
        result[0] = (a1[0] + a2[0]) / 2;
        result[1] = (a1[1] + a2[1]) / 2;
        break;
      }
      case 15: {
        getDiagArea(pattern, 1, 1, 1 + d, 1 + d, left, offset, a1);
        getDiagArea(pattern, 1, 0, 1 + d, 0 + d, left, offset, a2);
        result[0] = (a1[0] + a2[0]) / 2;
        result[1] = (a1[1] + a2[1]) / 2;
        break;
      }
    }
    return result;
  }
  function generatePatterns(patterns, offset, orthogonal) {
    const result = new Float32Array(2);
    for (let i = 0, l = patterns.length; i < l; ++i) {
      const pattern = patterns[i];
      const data = pattern.data;
      const size = pattern.width;
      for (let y = 0; y < size; ++y) {
        for (let x = 0; x < size; ++x) {
          if (orthogonal) {
            getOrthAreaForPattern(i, x, y, offset, result);
          } else {
            getDiagAreaForPattern(i, x, y, offset, result);
          }
          const c = (y * size + x) * 2;
          data[c] = result[0] * 255;
          data[c + 1] = result[1] * 255;
        }
      }
    }
  }
  function assemble(baseX, baseY, patterns, edges2, size, orthogonal, target) {
    const dstData = target.data;
    const dstWidth = target.width;
    for (let i = 0, l = patterns.length; i < l; ++i) {
      const edge = edges2[i];
      const pattern = patterns[i];
      const srcData = pattern.data;
      const srcWidth = pattern.width;
      for (let y = 0; y < size; ++y) {
        for (let x = 0; x < size; ++x) {
          const pX = edge[0] * size + baseX + x;
          const pY = edge[1] * size + baseY + y;
          const c = (pY * dstWidth + pX) * 4;
          const d = orthogonal ? (y * y * srcWidth + x * x) * 2 : (y * srcWidth + x) * 2;
          dstData[c] = srcData[d];
          dstData[c + 1] = srcData[d + 1];
          dstData[c + 2] = 0;
          dstData[c + 3] = 255;
        }
      }
    }
  }
  var SMAAAreaImageData = class {
    /**
     * Creates a new area image.
     *
     * @return {RawImageData} The generated image data.
     */
    static generate() {
      const width = 2 * 5 * ORTHOGONAL_SIZE;
      const height = orthogonalSubsamplingOffsets.length * 5 * ORTHOGONAL_SIZE;
      const data = new Uint8ClampedArray(width * height * 4);
      const result = new RawImageData(width, height, data);
      const orthPatternSize = Math.pow(ORTHOGONAL_SIZE - 1, 2) + 1;
      const diagPatternSize = DIAGONAL_SIZE;
      const orthogonalPatterns = [];
      const diagonalPatterns = [];
      for (let i = 3, l = data.length; i < l; i += 4) {
        data[i] = 255;
      }
      for (let i = 0; i < 16; ++i) {
        orthogonalPatterns.push(new RawImageData(
          orthPatternSize,
          orthPatternSize,
          new Uint8ClampedArray(orthPatternSize * orthPatternSize * 2),
          2
        ));
        diagonalPatterns.push(new RawImageData(
          diagPatternSize,
          diagPatternSize,
          new Uint8ClampedArray(diagPatternSize * diagPatternSize * 2),
          2
        ));
      }
      for (let i = 0, l = orthogonalSubsamplingOffsets.length; i < l; ++i) {
        generatePatterns(orthogonalPatterns, orthogonalSubsamplingOffsets[i], true);
        assemble(
          0,
          5 * ORTHOGONAL_SIZE * i,
          orthogonalPatterns,
          orthogonalEdges,
          ORTHOGONAL_SIZE,
          true,
          result
        );
      }
      for (let i = 0, l = diagonalSubsamplingOffsets.length; i < l; ++i) {
        generatePatterns(diagonalPatterns, diagonalSubsamplingOffsets[i], false);
        assemble(
          5 * ORTHOGONAL_SIZE,
          4 * DIAGONAL_SIZE * i,
          diagonalPatterns,
          diagonalEdges,
          DIAGONAL_SIZE,
          false,
          result
        );
      }
      return result;
    }
  };

  // src/textures/smaa/SMAASearchImageData.js
  var edges = /* @__PURE__ */ new Map([
    [bilinear(0, 0, 0, 0), new Float32Array([0, 0, 0, 0])],
    [bilinear(0, 0, 0, 1), new Float32Array([0, 0, 0, 1])],
    [bilinear(0, 0, 1, 0), new Float32Array([0, 0, 1, 0])],
    [bilinear(0, 0, 1, 1), new Float32Array([0, 0, 1, 1])],
    [bilinear(0, 1, 0, 0), new Float32Array([0, 1, 0, 0])],
    [bilinear(0, 1, 0, 1), new Float32Array([0, 1, 0, 1])],
    [bilinear(0, 1, 1, 0), new Float32Array([0, 1, 1, 0])],
    [bilinear(0, 1, 1, 1), new Float32Array([0, 1, 1, 1])],
    [bilinear(1, 0, 0, 0), new Float32Array([1, 0, 0, 0])],
    [bilinear(1, 0, 0, 1), new Float32Array([1, 0, 0, 1])],
    [bilinear(1, 0, 1, 0), new Float32Array([1, 0, 1, 0])],
    [bilinear(1, 0, 1, 1), new Float32Array([1, 0, 1, 1])],
    [bilinear(1, 1, 0, 0), new Float32Array([1, 1, 0, 0])],
    [bilinear(1, 1, 0, 1), new Float32Array([1, 1, 0, 1])],
    [bilinear(1, 1, 1, 0), new Float32Array([1, 1, 1, 0])],
    [bilinear(1, 1, 1, 1), new Float32Array([1, 1, 1, 1])]
  ]);
  function lerp2(a, b, p) {
    return a + (b - a) * p;
  }
  function bilinear(e0, e1, e2, e3) {
    const a = lerp2(e0, e1, 1 - 0.25);
    const b = lerp2(e2, e3, 1 - 0.25);
    return lerp2(a, b, 1 - 0.125);
  }
  function deltaLeft(left, top) {
    let d = 0;
    if (top[3] === 1) {
      d += 1;
    }
    if (d === 1 && top[2] === 1 && left[1] !== 1 && left[3] !== 1) {
      d += 1;
    }
    return d;
  }
  function deltaRight(left, top) {
    let d = 0;
    if (top[3] === 1 && left[1] !== 1 && left[3] !== 1) {
      d += 1;
    }
    if (d === 1 && top[2] === 1 && left[0] !== 1 && left[2] !== 1) {
      d += 1;
    }
    return d;
  }
  var SMAASearchImageData = class {
    /**
     * Creates a new search image.
     *
     * @return {RawImageData} The generated image data.
     */
    static generate() {
      const width = 66;
      const height = 33;
      const halfWidth = width / 2;
      const croppedWidth = 64;
      const croppedHeight = 16;
      const data = new Uint8ClampedArray(width * height);
      const croppedData = new Uint8ClampedArray(croppedWidth * croppedHeight * 4);
      for (let y = 0; y < height; ++y) {
        for (let x = 0; x < width; ++x) {
          const s = 0.03125 * x;
          const t = 0.03125 * y;
          if (edges.has(s) && edges.has(t)) {
            const e1 = edges.get(s);
            const e2 = edges.get(t);
            const i = y * width + x;
            data[i] = 127 * deltaLeft(e1, e2);
            data[i + halfWidth] = 127 * deltaRight(e1, e2);
          }
        }
      }
      for (let i = 0, y = height - croppedHeight; y < height; ++y) {
        for (let x = 0; x < croppedWidth; ++x, i += 4) {
          croppedData[i] = data[y * width + x];
          croppedData[i + 3] = 255;
        }
      }
      return new RawImageData(croppedWidth, croppedHeight, croppedData);
    }
  };

  // src/textures/smaa/worker.js
  self.addEventListener("message", (event) => {
    const areaImageData = SMAAAreaImageData.generate();
    const searchImageData = SMAASearchImageData.generate();
    postMessage({ areaImageData, searchImageData }, [
      areaImageData.data.buffer,
      searchImageData.data.buffer
    ]);
    close();
  });
})();
